{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNdXttvkIRPJZ8eJ8jGx6ww"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JIzp8Jk0LPxa","executionInfo":{"status":"ok","timestamp":1708511815294,"user_tz":-330,"elapsed":41,"user":{"displayName":"A G","userId":"11086915054296872235"}},"outputId":"801c9ad8-435f-4709-866b-a7de7dccce05"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":6}],"source":["# Decision tree as classifier\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier, plot_tree\n","from sklearn.metrics import accuracy_score,confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","\n","# Load the Iris dataset (as an example)\n","iris = load_iris()\n","x = iris.data\n","y = iris.target\n","# Split the data into training and testing sets\n","x_train, x_test, y_train, y_test = train_test_split(x,y,test_size= 0.2 ,random_state=42);\n","# Create a decision tree classifier\n","clf = DecisionTreeClassifier()\n","# Train the classifier on the training data\n","clf.fit(x_train, y_train)\n","#Make predictions on the test set\n","y_pred = clf.predict(x_test)\n","# Evaluate the accuracy of the classifier\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","accuracy\n"]}]}